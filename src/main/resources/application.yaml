server:
  port: 8080

spring:
  cache.type: redis
  main.banner-mode: 'off'
  profiles:
    active: default
  flyway:
    enabled: true
  datasource:
    url: "${DATABASE_JDBC_URL}"
    hikari:
      minimum-idle: 1
      maximum-pool-size: 5
  kafka:
    client-id: ${nais.app.name}-${fasit.environment.name}
    bootstrap-servers: ${KAFKA_BROKERS}
    properties:
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY}
      basic.auth.credentials.source: USER_INFO
      schema.registry.basic.auth.user.info: ${KAFKA_SCHEMA_REGISTRY_USER}:${KAFKA_SCHEMA_REGISTRY_PASSWORD}
      security:
        protocol: PLAINTEXT
      ssl:
        trust-store-location: file:${KAFKA_TRUSTSTORE_PATH}
        trust-store-password: ${KAFKA_CREDSTORE_PASSWORD}
        truststore-type: JKS
        key-store-location: file:${KAFKA_KEYSTORE_PATH}
        key-store-password: ${KAFKA_CREDSTORE_PASSWORD}
        keystore-type: PKCS12
    listener:
      concurrency: 1
      poll-timeout: 1000
      no-poll-threshold: 360
      ack-mode: batch
      type: batch
    consumer:
      group-id: ${nais.app.name}-${fasit.environment.name}
      max-poll-records: 1
      auto-offset-reset: earliest
      enable-auto-commit: false

management:
  endpoint:
    prometheus.enabled: true
    health.probes.enabled: true
  endpoints.web:
    base-path: "/internal"
    exposure.include: health, prometheus
  health:
    livenessstate.enabled: true
    readinessState.enabled: true
  prometheus:
    metrics.export.enabled: true

logging.config: "classpath:logback.xml"

no.nav.security.jwt:
  issuer:
    azureator:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}
    tokenx:
      discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
      accepted_audience: ${TOKEN_X_CLIENT_ID}
